#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–∞–ø–æ–≤
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–∞—Ö, cron –∑–∞–¥–∞—á–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã

set -e

BACKUP_DIR="/opt/backups"
CRON_LOG="/var/log/backup-cron.log"
BACKUP_LOG="/var/log/backup.log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ cron –∑–∞–¥–∞—á
check_cron_jobs() {
    print_header "Cron –∑–∞–¥–∞—á–∏ –±—ç–∫–∞–ø–æ–≤"
    
    local cron_jobs=$(crontab -l 2>/dev/null | grep -E "(backup|restore)" || echo "")
    
    if [ -n "$cron_jobs" ]; then
        echo "$cron_jobs" | while read -r line; do
            if echo "$line" | grep -q "backup.sh"; then
                if echo "$line" | grep -q "weekly"; then
                    print_success "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø: $(echo $line | awk '{print $1, $2, $3, $4, $5}')"
                else
                    print_success "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø: $(echo $line | awk '{print $1, $2, $3, $4, $5}')"
                fi
            fi
        done
    else
        print_error "Cron –∑–∞–¥–∞—á–∏ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤
check_recent_backups() {
    print_header "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã"
    
    if [ -d "$BACKUP_DIR" ]; then
        local backups=$(find "$BACKUP_DIR" -name "devops-portfolio-backup-*.tar.gz" -type f -printf "%T@ %Tc %p\n" 2>/dev/null | sort -nr)
        
        if [ -n "$backups" ]; then
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã (–º–∞–∫—Å–∏–º—É–º 3):"
            echo "$backups" | while read -r timestamp date time file; do
                local size=$(du -h "$file" | cut -f1)
                local age_hours=$(( ($(date +%s) - ${timestamp%.*}) / 3600 ))
                if [ $age_hours -lt 25 ]; then
                    print_success "$date $time - $size (${age_hours}—á –Ω–∞–∑–∞–¥)"
                elif [ $age_hours -lt 49 ]; then
                    print_warning "$date $time - $size (${age_hours}—á –Ω–∞–∑–∞–¥)"
                else
                    print_error "$date $time - $size (${age_hours}—á –Ω–∞–∑–∞–¥)"
                fi
            done
        else
            print_error "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $BACKUP_DIR"
    fi
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
check_logs() {
    print_header "–õ–æ–≥–∏ –±—ç–∫–∞–ø–æ–≤"
    
    if [ -f "$CRON_LOG" ]; then
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ cron –ª–æ–≥–∞:"
        tail -10 "$CRON_LOG" | while read -r line; do
            if echo "$line" | grep -q "ERROR\|error"; then
                print_error "$line"
            elif echo "$line" | grep -q "WARNING\|warning"; then
                print_warning "$line"
            else
                echo "  $line"
            fi
        done
    else
        print_warning "Cron –ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CRON_LOG"
    fi
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
check_system_health() {
    print_header "–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –±—ç–∫–∞–ø–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ -d "$BACKUP_DIR" ]; then
        print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
        local free_space=$(df "$BACKUP_DIR" | awk 'NR==2 {print $4}')
        local free_gb=$((free_space / 1024 / 1024))
        
        if [ $free_gb -gt 10 ]; then
            print_success "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${free_gb}GB"
        elif [ $free_gb -gt 5 ]; then
            print_warning "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${free_gb}GB (–º–∞–ª–æ)"
        else
            print_error "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${free_gb}GB (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ)"
        fi
    else
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if [ -x "/opt/devops-portfolio/infra/backup/backup.sh" ]; then
        print_success "–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    else
        print_error "–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if docker ps >/dev/null 2>&1; then
        print_success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    echo ""
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤
show_backup_stats() {
    print_header "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤"
    
    if [ -d "$BACKUP_DIR" ]; then
        local total_backups=$(find "$BACKUP_DIR" -name "devops-portfolio-backup-*.tar.gz" -type f | wc -l)
        local total_size=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo "0")
        
        echo "–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: $total_backups (–º–∞–∫—Å–∏–º—É–º 3)"
        echo "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
        
        if [ $total_backups -gt 0 ]; then
            echo ""
            echo "–î–µ—Ç–∞–ª–∏ –±—ç–∫–∞–ø–æ–≤:"
            find "$BACKUP_DIR" -name "devops-portfolio-backup-*.tar.gz" -type f -exec du -h {} \; | sort -hr | while read -r size file; do
                echo "  $size - $(basename "$file")"
            done
        fi
    else
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    echo ""
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
show_recommendations() {
    print_header "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    local last_backup=$(find "$BACKUP_DIR" -name "*.tar.gz" -type f -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -1)
    
    if [ -n "$last_backup" ]; then
        local timestamp=$(echo "$last_backup" | awk '{print $1}')
        local age_hours=$(( ($(date +%s) - ${timestamp%.*}) / 3600 ))
        
        if [ $age_hours -gt 25 ]; then
            print_warning "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –±—ã–ª ${age_hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cron –∑–∞–¥–∞—á–∏."
        else
            print_success "–ë—ç–∫–∞–ø—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ"
        fi
    else
        print_error "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é: /opt/devops-portfolio/infra/backup/backup.sh"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
    if [ -d "$BACKUP_DIR" ]; then
        local free_space=$(df "$BACKUP_DIR" | awk 'NR==2 {print $4}')
        local free_gb=$((free_space / 1024 / 1024))
        
        if [ $free_gb -lt 5 ]; then
            print_warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞. –û—á–∏—Å—Ç–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –¥–∏—Å–∫."
        fi
    fi
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –±—ç–∫–∞–ø–æ–≤ DevOps Portfolio${NC}"
    echo ""
    
    check_cron_jobs
    check_recent_backups
    check_logs
    check_system_health
    show_backup_stats
    show_recommendations
    
    echo -e "${GREEN}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===${NC}"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
