---
- name: Deploy DevOps Portfolio stack
  hosts: all
  become: true
  vars:
    project_root: "{{ playbook_dir }}/../.."
  tasks:
    - name: Create project directory
      file:
        path: /opt/devops-portfolio
        state: directory
        mode: '0755'

    - name: Create infra directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /opt/devops-portfolio/infra
        - /opt/devops-portfolio/infra/nginx
        - /opt/devops-portfolio/infra/nginx/webroot
        - /opt/devops-portfolio/infra/monitoring
        - /opt/devops-portfolio/infra/monitoring/prometheus
        - /opt/devops-portfolio/infra/monitoring/prometheus/rules
        - /opt/devops-portfolio/infra/monitoring/alertmanager
        - /opt/devops-portfolio/infra/monitoring/grafana
        - /opt/devops-portfolio/infra/monitoring/grafana/dashboards
        - /opt/devops-portfolio/infra/logging
        - /opt/devops-portfolio/infra/logging/loki
        - /opt/devops-portfolio/infra/logging/promtail
        - /opt/devops-portfolio/infra/backup

    - name: Copy nginx configuration files
      copy:
        src: "{{ project_root }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: "infra/nginx/nginx.conf", dest: "/opt/devops-portfolio/infra/nginx/nginx.conf" }
        - { src: "infra/nginx/nginx-http.conf", dest: "/opt/devops-portfolio/infra/nginx/nginx-http.conf" }

    - name: Remove alertmanager directory if it exists as directory
      file:
        path: /opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml
        state: absent
      when: ansible_check_mode == false

    - name: Copy monitoring configuration files
      copy:
        src: "{{ project_root }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
        force: yes
      loop:
        - { src: "infra/monitoring/prometheus/prometheus.yml", dest: "/opt/devops-portfolio/infra/monitoring/prometheus/prometheus.yml" }
        - { src: "infra/monitoring/prometheus/rules/alerts.yml", dest: "/opt/devops-portfolio/infra/monitoring/prometheus/rules/alerts.yml" }
        - { src: "infra/monitoring/alertmanager/alertmanager.yml", dest: "/opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml" }
        - { src: "infra/monitoring/grafana/grafana.ini", dest: "/opt/devops-portfolio/infra/monitoring/grafana/grafana.ini" }
        - { src: "infra/monitoring/grafana/datasources.yml", dest: "/opt/devops-portfolio/infra/monitoring/grafana/datasources.yml" }
        - { src: "infra/monitoring/grafana/dashboards.yml", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards.yml" }

    - name: Copy logging configuration files
      copy:
        src: "{{ project_root }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: "infra/logging/loki/loki-config.yml", dest: "/opt/devops-portfolio/infra/logging/loki/loki-config.yml" }
        - { src: "infra/logging/promtail/promtail-config.yml", dest: "/opt/devops-portfolio/infra/logging/promtail/promtail-config.yml" }

    - name: Copy Grafana dashboards
      copy:
        src: "{{ project_root }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: "infra/monitoring/grafana/dashboards/application-metrics.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/application-metrics.json" }
        - { src: "infra/monitoring/grafana/dashboards/docker-containers.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/docker-containers.json" }
        - { src: "infra/monitoring/grafana/dashboards/logs-dashboard.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/logs-dashboard.json" }
        - { src: "infra/monitoring/grafana/dashboards/logs-metrics.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/logs-metrics.json" }
        - { src: "infra/monitoring/grafana/dashboards/loki-logs-dashboard.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/loki-logs-dashboard.json" }
        - { src: "infra/monitoring/grafana/dashboards/loki-metrics-dashboard.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/loki-metrics-dashboard.json" }
        - { src: "infra/monitoring/grafana/dashboards/promtail-dashboard.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/promtail-dashboard.json" }
        - { src: "infra/monitoring/grafana/dashboards/system-overview.json", dest: "/opt/devops-portfolio/infra/monitoring/grafana/dashboards/system-overview.json" }

    - name: Verify alertmanager.yml exists and is a file
      stat:
        path: /opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml
      register: alertmanager_file

    - name: Display alertmanager file status
      debug:
        msg: "Alertmanager file exists: {{ alertmanager_file.stat.exists }}, is file: {{ alertmanager_file.stat.isreg }}, is directory: {{ alertmanager_file.stat.isdir }}"

    - name: List alertmanager directory contents
      shell: ls -la /opt/devops-portfolio/infra/monitoring/alertmanager/
      register: alertmanager_dir
      ignore_errors: true

    - name: Display alertmanager directory contents
      debug:
        msg: "{{ alertmanager_dir.stdout_lines }}"

    - name: Fix alertmanager.yml if it's a directory
      shell: |
        if [ -d "/opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml" ]; then
          rm -rf "/opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml"
        fi
      when: alertmanager_file.stat.isdir | default(false)

    - name: Recreate alertmanager.yml file
      copy:
        src: "{{ project_root }}/infra/monitoring/alertmanager/alertmanager.yml"
        dest: /opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml
        mode: '0644'
        force: yes
      when: alertmanager_file.stat.isdir | default(false)

    - name: Copy backup scripts
      copy:
        src: "{{ project_root }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0755'
      loop:
        - { src: "infra/backup/backup.sh", dest: "/opt/devops-portfolio/infra/backup/backup.sh" }
        - { src: "infra/backup/restore.sh", dest: "/opt/devops-portfolio/infra/backup/restore.sh" }
        - { src: "infra/backup/setup-cron.sh", dest: "/opt/devops-portfolio/infra/backup/setup-cron.sh" }
        - { src: "infra/backup/backup-status.sh", dest: "/opt/devops-portfolio/infra/backup/backup-status.sh" }

    - name: Copy monitoring scripts
      copy:
        src: "{{ project_root }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0755'
      loop:
        - { src: "infra/monitoring/setup-telegram-bot.sh", dest: "/opt/devops-portfolio/setup-telegram-bot.sh" }
        - { src: "infra/monitoring/update-alertmanager-config.sh", dest: "/opt/devops-portfolio/update-alertmanager-config.sh" }
        - { src: "infra/monitoring/test-alerts.sh", dest: "/opt/devops-portfolio/test-alerts.sh" }

    - name: Copy application files
      synchronize:
        src: "{{ project_root }}/app/"
        dest: /opt/devops-portfolio/app/
        delete: yes
        recursive: yes

    - name: Copy Dockerfile
      copy:
        src: "{{ project_root }}/Dockerfile"
        dest: /opt/devops-portfolio/Dockerfile
        mode: '0644'

    - name: Copy docker-compose.yml
      copy:
        src: "{{ project_root }}/docker-compose.yml"
        dest: /opt/devops-portfolio/docker-compose.yml
        mode: '0644'

    - name: Create .env file with placeholder values
      copy:
        content: |
          # Telegram Bot Configuration
          # Configure these values manually after deployment
          TELEGRAM_BOT_TOKEN=your_bot_token_here
          TELEGRAM_CHAT_ID=your_chat_id_here
        dest: /opt/devops-portfolio/.env
        mode: '0644'

    - name: Verify all required files exist before starting
      stat:
        path: "{{ item }}"
      register: required_files
      loop:
        - /opt/devops-portfolio/infra/monitoring/alertmanager/alertmanager.yml
        - /opt/devops-portfolio/infra/monitoring/prometheus/rules/alerts.yml
        - /opt/devops-portfolio/infra/monitoring/prometheus/prometheus.yml
        - /opt/devops-portfolio/infra/logging/loki/loki-config.yml
        - /opt/devops-portfolio/infra/logging/promtail/promtail-config.yml
        - /opt/devops-portfolio/.env

    - name: Display file verification results
      debug:
        msg: "File {{ item.item }} exists: {{ item.stat.exists }}"
      loop: "{{ required_files.results }}"

    - name: Stop existing containers
      shell: docker compose -f /opt/devops-portfolio/docker-compose.yml down
      args:
        chdir: /opt/devops-portfolio
      ignore_errors: true

    - name: Build application image
      shell: docker compose -f /opt/devops-portfolio/docker-compose.yml build app
      args:
        chdir: /opt/devops-portfolio

    - name: Start stack
      shell: docker compose -f /opt/devops-portfolio/docker-compose.yml up -d
      args:
        chdir: /opt/devops-portfolio

    - name: Wait for services to start
      wait_for:
        port: 8000
        host: localhost
        timeout: 60

    - name: Check if SSL certificates exist
      stat:
        path: /etc/letsencrypt/live/pishchik-dev.tech/fullchain.pem
      register: ssl_cert

    - name: Run certbot if SSL certificates don't exist
      shell: docker run --rm -v /etc/letsencrypt:/etc/letsencrypt -v /opt/devops-portfolio/infra/nginx/webroot:/var/www/certbot certbot/certbot certonly --webroot --webroot-path=/var/www/certbot --email admin@pishchik-dev.tech --agree-tos --no-eff-email -d pishchik-dev.tech -d www.pishchik-dev.tech
      when: not ssl_cert.stat.exists

    - name: Restart nginx after SSL setup
      shell: docker restart nginx
      when: not ssl_cert.stat.exists

    - name: Health check - Grafana
      uri:
        url: http://localhost:3000/api/health
        method: GET
        status_code: 200
      ignore_errors: true

    - name: Health check - Prometheus
      uri:
        url: http://localhost:9090/-/healthy
        method: GET
        status_code: 200
      ignore_errors: true

    - name: Health check - Loki
      uri:
        url: http://localhost:3100/ready
        method: GET
        status_code: 200
      ignore_errors: true
