- name: Create app directory
  file:
    path: /opt/devops-portfolio
    state: directory
    mode: '0755'

- name: Upload docker-compose.yml
  template:
    src: ../templates/docker-compose.yml.j2
    dest: /opt/devops-portfolio/docker-compose.yml

- name: Ensure Nginx webroot for ACME exists
  file:
    path: /opt/devops-portfolio/infra/nginx/webroot
    state: directory
    mode: '0755'
  when: enable_https | default(false) | bool

- name: Upload Nginx config (HTTP only)
  copy:
    src: ../../../../infra/nginx/nginx-http.conf
    dest: /opt/devops-portfolio/infra/nginx/nginx-http.conf
    mode: '0644'

- name: Ensure monitoring directories exist
  file:
    path: "/opt/devops-portfolio/infra/monitoring/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - prometheus
    - grafana

- name: Check if grafana datasources.yml is a directory
  stat:
    path: /opt/devops-portfolio/infra/monitoring/grafana/datasources.yml
  register: gf_ds

- name: Remove wrong grafana datasources.yml directory
  file:
    path: /opt/devops-portfolio/infra/monitoring/grafana/datasources.yml
    state: absent
  when: gf_ds.stat.isdir is defined and gf_ds.stat.isdir

- name: Upload Prometheus config
  copy:
    src: ../../../../infra/monitoring/prometheus/prometheus.yml
    dest: /opt/devops-portfolio/infra/monitoring/prometheus/prometheus.yml
    mode: '0644'

- name: Upload Grafana datasources config
  copy:
    src: ../../../../infra/monitoring/grafana/datasources.yml
    dest: /opt/devops-portfolio/infra/monitoring/grafana/datasources.yml
    mode: '0644'

- name: Ensure logging directories exist
  file:
    path: "/opt/devops-portfolio/infra/logging/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - loki
    - promtail

- name: Check if loki config is a directory
  stat:
    path: /opt/devops-portfolio/infra/logging/loki/loki-config.yml
  register: loki_cfg

- name: Remove wrong loki config directory
  file:
    path: /opt/devops-portfolio/infra/logging/loki/loki-config.yml
    state: absent
  when: loki_cfg.stat.isdir is defined and loki_cfg.stat.isdir

- name: Upload Loki config
  copy:
    src: ../../../../infra/logging/loki/loki-config.yml
    dest: /opt/devops-portfolio/infra/logging/loki/loki-config.yml
    mode: '0644'

- name: Upload Promtail config
  copy:
    src: ../../../../infra/logging/promtail/promtail-config.yml
    dest: /opt/devops-portfolio/infra/logging/promtail/promtail-config.yml
    mode: '0644'

- name: Login to GHCR (optional)
  community.docker.docker_login:
    registry_url: ghcr.io
    username: "{{ ghcr_username | default(omit) }}"
    password: "{{ ghcr_token | default(omit) }}"
  when: ghcr_username is defined and ghcr_token is defined

- name: Pull images
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    pull: always

- name: Remove stale nginx container (if any)
  community.docker.docker_container:
    name: nginx
    state: absent
    force_kill: true

- name: Test Nginx configuration syntax
  command: docker run --rm -v /opt/devops-portfolio/infra/nginx/nginx-http.conf:/etc/nginx/conf.d/default.conf:ro nginx:1.27-alpine nginx -t
  register: nginx_config_test
  ignore_errors: true

- name: Display Nginx config test result
  debug:
    var: nginx_config_test

- name: Check if all required config files exist
  stat:
    path: "/opt/devops-portfolio/{{ item }}"
  register: config_files
  loop:
    - infra/nginx/nginx-http.conf
    - infra/monitoring/prometheus/prometheus.yml
    - infra/monitoring/grafana/datasources.yml
    - infra/logging/loki/loki-config.yml
    - infra/logging/promtail/promtail-config.yml

- name: Display config files status
  debug:
    msg: "{{ item.item }} exists: {{ item.stat.exists }}"
  loop: "{{ config_files.results }}"

- name: Start stack (http only until certs)
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    state: present
    remove_orphans: true
    recreate: always

- name: Check all container statuses
  community.docker.docker_container_info:
    name: "{{ item }}"
  register: container_status
  loop:
    - nginx
    - app
    - prometheus
    - grafana
    - loki
    - promtail

- name: Display all container statuses
  debug:
    var: container_status

- name: Check container logs
  command: docker logs "{{ item.item }}"
  register: container_logs
  loop: "{{ container_status.results }}"
  when: item.exists
  ignore_errors: true

- name: Display container logs
  debug:
    msg: "{{ item.item }} logs: {{ item.stdout_lines | default(['No logs']) }}"
  loop: "{{ container_logs.results | default([]) }}"
  when: item is defined

- name: Wait for Nginx to listen on 80
  wait_for:
    host: 127.0.0.1
    port: 80
    delay: 2
    timeout: 60

- name: Create ACME health file in webroot
  command: docker exec nginx sh -c 'mkdir -p /var/www/certbot/.well-known/acme-challenge && echo ok > /var/www/certbot/.well-known/acme-challenge/health'
  when: enable_https | default(false) | bool

- name: Verify ACME health over domain
  uri:
    url: "http://{{ domain_name }}/.well-known/acme-challenge/health"
    return_content: true
    status_code: 200
  register: acme_health
  retries: 10
  delay: 6
  until: acme_health.status == 200 and acme_health.content is search('ok')
  when: enable_https | default(false) | bool

- name: Obtain/renew certificates (webroot)
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    services:
      - certbot
    state: present
  when: enable_https | default(false) | bool

- name: Issue certificate inside certbot service if not exists
  command: >-
    docker compose -f /opt/devops-portfolio/docker-compose.yml exec -T certbot sh -lc
    "test -f /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem || certbot certonly --agree-tos --email {{ letsencrypt_email }} --non-interactive --webroot -w /var/www/certbot -d {{ domain_name }}"
  when: enable_https | default(false) | bool

- name: Upload Nginx config (HTTPS)
  template:
    src: ../templates/nginx-default.conf.j2
    dest: /opt/devops-portfolio/infra/nginx/default.conf
    mode: '0644'
  when: enable_https | default(false) | bool

- name: Reload Nginx to pick up certs
  command: docker exec nginx nginx -s reload
  when: enable_https | default(false) | bool
