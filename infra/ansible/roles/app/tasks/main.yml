- name: Create app directory
  file:
    path: /opt/devops-portfolio
    state: directory
    mode: '0755'

- name: Upload docker-compose.yml
  template:
    src: ../templates/docker-compose.yml.j2
    dest: /opt/devops-portfolio/docker-compose.yml

- name: Upload Dockerfile
  copy:
    src: ../../../../Dockerfile
    dest: /opt/devops-portfolio/Dockerfile
    mode: '0644'

- name: Upload app source code
  copy:
    src: ../../../../app/
    dest: /opt/devops-portfolio/app/
    mode: '0644'

- name: Ensure directories exist
  file:
    path: "/opt/devops-portfolio/infra/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - nginx/webroot
    - monitoring/prometheus
    - monitoring/grafana
    - monitoring/grafana/dashboards
    - logging/loki
    - logging/promtail

- name: Upload configuration files
  copy:
    src: ../../../../infra/{{ item.src }}
    dest: /opt/devops-portfolio/infra/{{ item.dest }}
    mode: '0644'
  loop:
    - { src: 'nginx/nginx-http.conf', dest: 'nginx/nginx-http.conf' }
    - { src: 'monitoring/prometheus/prometheus.yml', dest: 'monitoring/prometheus/prometheus.yml' }
    - { src: 'monitoring/grafana/datasources.yml', dest: 'monitoring/grafana/datasources.yml' }
    - { src: 'monitoring/grafana/dashboards.yml', dest: 'monitoring/grafana/dashboards.yml' }
    - { src: 'logging/loki/loki-config.yml', dest: 'logging/loki/loki-config.yml' }
    - { src: 'logging/promtail/promtail-config.yml', dest: 'logging/promtail/promtail-config.yml' }

- name: Setup Grafana dashboards
  block:
    - name: Upload Grafana dashboards
      copy:
        src: ../../../../infra/monitoring/grafana/dashboards/
        dest: /opt/devops-portfolio/infra/monitoring/grafana/dashboards/
        mode: '0644'
        owner: 472
        group: 472
        force: true
        backup: true

    - name: Set correct permissions for Grafana dashboards
      file:
        path: /opt/devops-portfolio/infra/monitoring/grafana/dashboards
        mode: '0755'
        owner: 472
        group: 472
        recurse: true

    - name: Ensure all dashboard files have correct permissions
      file:
        path: "{{ item }}"
        mode: '0644'
        owner: 472
        group: 472
      loop: "{{ query('fileglob', '/opt/devops-portfolio/infra/monitoring/grafana/dashboards/*.json') }}"
      ignore_errors: true

    - name: Wait for Grafana to be ready
      uri:
        url: "http://localhost:3001/api/health"
        method: GET
        status_code: 200
      retries: 10
      delay: 5
      ignore_errors: true

    - name: Wait for dashboards to load
      pause:
        seconds: 10

    - name: Display dashboard files uploaded
      debug:
        msg: "Dashboard files uploaded to /opt/devops-portfolio/infra/monitoring/grafana/dashboards/"

    - name: Stop Promtail to update configuration
      community.docker.docker_container:
        name: promtail
        state: stopped
      ignore_errors: true

    - name: Copy updated Promtail configuration
      copy:
        src: ../../../../infra/logging/promtail/promtail-config.yml
        dest: /opt/devops-portfolio/infra/logging/promtail/promtail-config.yml
        mode: '0644'
        force: true

    - name: Start Promtail with new configuration
      community.docker.docker_container:
        name: promtail
        state: started
      ignore_errors: true

    - name: Wait for Promtail to start
      pause:
        seconds: 15

- name: Login to GHCR (optional)
  community.docker.docker_login:
    registry_url: ghcr.io
    username: "{{ ghcr_username | default(omit) }}"
    password: "{{ ghcr_token | default(omit) }}"
  when: ghcr_username is defined and ghcr_token is defined

- name: Build and start containers
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    build: always
    pull: never

- name: Test Nginx configuration syntax
  command: docker run --rm -v /opt/devops-portfolio/infra/nginx/nginx-http.conf:/etc/nginx/conf.d/default.conf:ro --network host --add-host app:127.0.0.1 --add-host prometheus:127.0.0.1 --add-host grafana:127.0.0.1 --add-host loki:127.0.0.1 nginx:1.27-alpine nginx -t
  register: nginx_config_test
  ignore_errors: true


- name: Wait for services to start
  wait_for:
    host: 127.0.0.1
    port: "{{ item }}"
    delay: 5
    timeout: 60
  loop:
    - 80    # Nginx
    - 8000  # App
    - 9090  # Prometheus
    - 3001  # Grafana
    - 3100  # Loki
  ignore_errors: true

- name: Restart Grafana to reload dashboards
  community.docker.docker_container:
    name: grafana
    state: stopped
  ignore_errors: true

- name: Start Grafana after restart
  community.docker.docker_container:
    name: grafana
    state: started
  ignore_errors: true

- name: Wait for Grafana to start after restart
  pause:
    seconds: 15

- name: Test services connectivity
  uri:
    url: "{{ item.url }}"
    method: GET
    return_content: true
  register: service_tests
  loop:
    - { name: "App", url: "http://localhost:8000/" }
    - { name: "Prometheus", url: "http://localhost:9090/api/v1/query?query=up" }
    - { name: "Grafana", url: "http://localhost:3001/api/health" }
    - { name: "Loki", url: "http://localhost:3100/ready" }
  ignore_errors: true

- name: Wait for Loki to be ready
  uri:
    url: "http://localhost:3100/ready"
    method: GET
    status_code: 200
  retries: 10
  delay: 5
  ignore_errors: true

- name: Test Grafana dashboards API
  uri:
    url: "http://localhost:3001/api/search?type=dash-db"
    method: GET
    return_content: true
    user: admin
    password: "{{ grafana_admin_password | default('QAwsEDrf') }}"
    status_code: [200, 401]
  register: grafana_dashboards_test
  ignore_errors: true

- name: Check if dashboards are loaded
  set_fact:
    dashboard_count: "{{ grafana_dashboards_test.json | length | default(0) }}"

- name: Display deployment summary
  debug:
    msg: |
      ========================================
      DEPLOYMENT SUMMARY
      ========================================
      Services Status:
      {% for test in service_tests.results %}
      - {{ test.item.name }}: {{ 'OK' if test.status == 200 else 'FAILED' }}
      {% endfor %}
      Grafana Dashboards: {{ dashboard_count }}
      ========================================

- name: Fail if no dashboards are loaded
  fail:
    msg: "No dashboards were loaded in Grafana. Check the logs and configuration."
  when: dashboard_count == 0

- name: Setup backup scripts
  block:
    - name: Create backup directory
      file:
        path: /opt/backups
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    - name: Copy backup scripts
      copy:
        src: ../../../../infra/backup/
        dest: /opt/devops-portfolio/infra/backup/
        mode: '0755'
        force: true
        backup: true

    - name: Make backup scripts executable
      file:
        path: "{{ item }}"
        mode: '0755'
      loop:
        - /opt/devops-portfolio/infra/backup/backup.sh
        - /opt/devops-portfolio/infra/backup/restore.sh
        - /opt/devops-portfolio/infra/backup/setup-cron.sh
        - /opt/devops-portfolio/infra/backup/backup-status.sh

    - name: Configure sudo for backup script
      lineinfile:
        path: /etc/sudoers.d/backup
        line: "ubuntu ALL=(ALL) NOPASSWD: /opt/devops-portfolio/infra/backup/backup.sh"
        create: yes
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Setup automatic backups
      shell: /opt/devops-portfolio/infra/backup/setup-cron.sh
      become: yes
      ignore_errors: true

    - name: Ensure cron service is running
      systemd:
        name: cron
        state: started
        enabled: yes
      become: yes

    - name: Add backup cron job manually
      cron:
        name: "DevOps Portfolio Backup"
        minute: "0"
        hour: "2"
        job: "/opt/devops-portfolio/infra/backup/backup.sh >> /var/log/backup-cron.log 2>&1"
        user: root
      become: yes

    - name: Copy project files to app container
      shell: |
        if docker ps | grep -q app; then
          # Копируем docker-compose.yml в контейнер
          docker cp /opt/devops-portfolio/docker-compose.yml app:/opt/devops-portfolio/
          
          # Копируем все конфигурации в контейнер
          docker cp /opt/devops-portfolio/infra/nginx app:/opt/devops-portfolio/infra/
          docker cp /opt/devops-portfolio/infra/monitoring app:/opt/devops-portfolio/infra/
          docker cp /opt/devops-portfolio/infra/logging app:/opt/devops-portfolio/infra/
          
          # Копируем README, LICENSE, Dockerfile в контейнер
          docker cp /opt/devops-portfolio/README.md app:/opt/devops-portfolio/ 2>/dev/null || true
          docker cp /opt/devops-portfolio/LICENSE app:/opt/devops-portfolio/ 2>/dev/null || true
          docker cp /opt/devops-portfolio/Dockerfile app:/opt/devops-portfolio/ 2>/dev/null || true
        fi
      ignore_errors: true

    - name: Force update backup script in app container
      shell: |
        if docker ps | grep -q app; then
          docker exec app cp /opt/devops-portfolio/infra/backup/backup.sh /opt/devops-portfolio/infra/backup/backup.sh.new
          docker exec app mv /opt/devops-portfolio/infra/backup/backup.sh.new /opt/devops-portfolio/infra/backup/backup.sh
          docker exec app chmod +x /opt/devops-portfolio/infra/backup/backup.sh
        fi
      ignore_errors: true

    - name: Restart app container to ensure script is updated
      community.docker.docker_container:
        name: app
        state: restarted
      ignore_errors: true

    - name: Verify backup script is updated
      shell: |
        if docker ps | grep -q app; then
          docker exec app grep -q "docker_compose_found" /opt/devops-portfolio/infra/backup/backup.sh
        fi
      register: script_updated
      ignore_errors: true

    - name: Display script update status
      debug:
        msg: "Backup script updated: {{ 'Yes' if script_updated.rc == 0 else 'No' }}"

- name: Show manual test commands
  debug:
    msg: |
      Manual test commands:
      - docker ps -a
      - docker logs grafana
      - curl -u admin:{{ grafana_admin_password | default('admin') }} http://localhost:3001/api/search?type=dash-db
      
      Backup commands:
      - /opt/devops-portfolio/infra/backup/backup.sh
      - /opt/devops-portfolio/infra/backup/restore.sh /opt/backups/backup-file.tar.gz
      - /opt/devops-portfolio/infra/backup/backup-status.sh
      - crontab -l

- name: Create ACME health file in webroot
  command: docker exec nginx sh -c 'mkdir -p /var/www/certbot/.well-known/acme-challenge && echo ok > /var/www/certbot/.well-known/acme-challenge/health'
  when: enable_https | default(false) | bool

- name: Verify ACME health over domain
  uri:
    url: "http://{{ domain_name }}/.well-known/acme-challenge/health"
    return_content: true
    status_code: 200
  register: acme_health
  retries: 10
  delay: 6
  until: acme_health.status == 200 and acme_health.content is search('ok')
  when: enable_https | default(false) | bool

- name: Obtain/renew certificates (webroot)
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    services:
      - certbot
    state: present
  when: enable_https | default(false) | bool

- name: Issue certificate inside certbot service if not exists
  command: >-
    docker compose -f /opt/devops-portfolio/docker-compose.yml exec -T certbot sh -lc
    "test -f /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem || certbot certonly --agree-tos --email {{ letsencrypt_email }} --non-interactive --webroot -w /var/www/certbot -d {{ domain_name }}"
  when: enable_https | default(false) | bool

- name: Upload Nginx config (HTTPS)
  template:
    src: ../templates/nginx-default.conf.j2
    dest: /opt/devops-portfolio/infra/nginx/default.conf
    mode: '0644'
  when: enable_https | default(false) | bool

- name: Reload Nginx to pick up certs
  command: docker exec nginx nginx -s reload
  when: enable_https | default(false) | bool