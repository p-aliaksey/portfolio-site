- name: Create app directory
  file:
    path: /opt/devops-portfolio
    state: directory
    mode: '0755'

- name: Upload docker-compose.yml
  template:
    src: ../templates/docker-compose.yml.j2
    dest: /opt/devops-portfolio/docker-compose.yml

- name: Ensure Nginx webroot for ACME exists
  file:
    path: /opt/devops-portfolio/infra/nginx/webroot
    state: directory
    mode: '0755'

- name: Upload Nginx config (HTTPS)
  template:
    src: ../templates/nginx-default.conf.j2
    dest: /opt/devops-portfolio/infra/nginx/default.conf
    mode: '0644'

- name: Ensure monitoring directories exist
  file:
    path: "/opt/devops-portfolio/infra/monitoring/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - prometheus
    - grafana

- name: Upload Prometheus config
  copy:
    src: ../../../../infra/monitoring/prometheus/prometheus.yml
    dest: /opt/devops-portfolio/infra/monitoring/prometheus/prometheus.yml
    mode: '0644'

- name: Upload Grafana datasources config
  copy:
    src: ../../../../infra/monitoring/grafana/datasources.yml
    dest: /opt/devops-portfolio/infra/monitoring/grafana/datasources.yml
    mode: '0644'

- name: Ensure logging directories exist
  file:
    path: "/opt/devops-portfolio/infra/logging/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - loki
    - promtail

- name: Upload Loki config
  copy:
    src: ../../../../infra/logging/loki/loki-config.yml
    dest: /opt/devops-portfolio/infra/logging/loki/loki-config.yml
    mode: '0644'

- name: Upload Promtail config
  copy:
    src: ../../../../infra/logging/promtail/promtail-config.yml
    dest: /opt/devops-portfolio/infra/logging/promtail/promtail-config.yml
    mode: '0644'

- name: Login to GHCR (optional)
  community.docker.docker_login:
    registry_url: ghcr.io
    username: "{{ ghcr_username | default(omit) }}"
    password: "{{ ghcr_token | default(omit) }}"
  when: ghcr_username is defined and ghcr_token is defined

- name: Pull images
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    pull: always

- name: Start stack (http only until certs)
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    state: present

- name: Obtain/renew certificates (webroot)
  community.docker.docker_compose_v2:
    project_src: /opt/devops-portfolio
    services:
      - certbot
    state: present

- name: Issue certificate if not exists
  community.docker.docker_container:
    name: certbot_once
    image: certbot/certbot:latest
    auto_remove: true
    entrypoint: /bin/sh
    command: -c "test -f /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem || certbot certonly --agree-tos --email {{ letsencrypt_email }} --non-interactive --webroot -w /var/www/certbot -d {{ domain_name }}"
    volumes:
      - certbot-www:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    pull: yes
    detach: false

- name: Reload Nginx to pick up certs
  command: docker exec nginx nginx -s reload
