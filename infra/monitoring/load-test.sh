#!/bin/bash

# –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
# –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ERROR:${NC} $1"
}

warning() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING:${NC} $1"
}

info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO:${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    commands=("stress" "curl" "docker")
    missing=()
    
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" > /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥—ã: ${missing[*]}"
        info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:"
        info "Ubuntu/Debian: sudo apt-get install stress curl docker.io"
        info "CentOS/RHEL: sudo yum install stress curl docker"
        exit 1
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# CPU –Ω–∞–≥—Ä—É–∑–∫–∞
cpu_stress_test() {
    local duration=${1:-60}
    local cores=${2:-2}
    
    log "–ó–∞–ø—É—Å–∫ CPU –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞..."
    info "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å, –Ø–¥–µ—Ä: ${cores}"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º stress –≤ —Ñ–æ–Ω–µ
    stress --cpu "$cores" --timeout "${duration}s" &
    local stress_pid=$!
    
    log "CPU —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω (PID: $stress_pid)"
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–∞–≥—Ä—É–∑–∫—É
    for ((i=1; i<=duration; i++)); do
        cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
        load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
        
        if (( i % 10 == 0 )); then
            info "CPU: ${cpu_usage}%, Load: ${load_avg}"
        fi
        
        sleep 1
    done
    
    wait $stress_pid
    log "CPU —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# Memory –Ω–∞–≥—Ä—É–∑–∫–∞
memory_stress_test() {
    local duration=${1:-60}
    local memory_mb=${2:-512}
    
    log "–ó–∞–ø—É—Å–∫ Memory –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞..."
    info "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å, –ü–∞–º—è—Ç—å: ${memory_mb}MB"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º stress –≤ —Ñ–æ–Ω–µ
    stress --vm 1 --vm-bytes "${memory_mb}M" --timeout "${duration}s" &
    local stress_pid=$!
    
    log "Memory —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω (PID: $stress_pid)"
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    for ((i=1; i<=duration; i++)); do
        mem_usage=$(free | grep Mem | awk '{printf "%.1f", ($3/$2) * 100.0}')
        
        if (( i % 10 == 0 )); then
            info "Memory usage: ${mem_usage}%"
        fi
        
        sleep 1
    done
    
    wait $stress_pid
    log "Memory —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# Disk I/O –Ω–∞–≥—Ä—É–∑–∫–∞
disk_stress_test() {
    local duration=${1:-60}
    local workers=${2:-2}
    
    log "–ó–∞–ø—É—Å–∫ Disk I/O –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞..."
    info "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å, Workers: ${workers}"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    local temp_dir="/tmp/disk_stress_$$"
    mkdir -p "$temp_dir"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º stress –≤ —Ñ–æ–Ω–µ
    stress --io "$workers" --hdd 1 --hdd-bytes 100M --timeout "${duration}s" --temp-dir "$temp_dir" &
    local stress_pid=$!
    
    log "Disk I/O —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω (PID: $stress_pid)"
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º I/O
    for ((i=1; i<=duration; i++)); do
        if (( i % 15 == 0 )); then
            disk_usage=$(df /tmp | tail -1 | awk '{print $5}')
            info "Disk usage /tmp: ${disk_usage}"
        fi
        
        sleep 1
    done
    
    wait $stress_pid
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -rf "$temp_dir"
    log "Disk I/O —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –°–µ—Ç–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
network_stress_test() {
    local duration=${1:-60}
    local requests_per_second=${2:-10}
    
    log "–ó–∞–ø—É—Å–∫ Network –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞..."
    info "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å, RPS: ${requests_per_second}"
    
    local app_url="http://localhost:8000"
    local total_requests=$((duration * requests_per_second))
    local interval=$(echo "scale=2; 1 / $requests_per_second" | bc -l)
    
    log "–û—Ç–ø—Ä–∞–≤–∫–∞ $total_requests –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ $app_url"
    
    # –°—á–µ—Ç—á–∏–∫–∏
    local success_count=0
    local error_count=0
    
    for ((i=1; i<=total_requests; i++)); do
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        if curl -s -o /dev/null -w "%{http_code}" "$app_url" | grep -q "200"; then
            ((success_count++))
        else
            ((error_count++))
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø—Ä–æ—Å–æ–≤
        if (( i % 50 == 0 )); then
            info "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $i/$total_requests, –£—Å–ø–µ—à–Ω–æ: $success_count, –û—à–∏–±–æ–∫: $error_count"
        fi
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        sleep "$interval"
    done
    
    log "Network —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
    log "–ò—Ç–æ–≥–æ - –£—Å–ø–µ—à–Ω–æ: $success_count, –û—à–∏–±–æ–∫: $error_count"
}

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç
combined_stress_test() {
    local duration=${1:-120}
    
    log "–ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞..."
    info "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}—Å"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    cpu_stress_test "$duration" 1 &
    local cpu_pid=$!
    
    sleep 5
    memory_stress_test "$duration" 256 &
    local mem_pid=$!
    
    sleep 5  
    disk_stress_test "$duration" 1 &
    local disk_pid=$!
    
    sleep 5
    network_stress_test "$duration" 5 &
    local net_pid=$!
    
    log "–í—Å–µ —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
    info "CPU PID: $cpu_pid, Memory PID: $mem_pid, Disk PID: $disk_pid, Network PID: $net_pid"
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    wait $cpu_pid $mem_pid $disk_pid $net_pid
    
    log "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
check_alerts() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Prometheus –∞–ª–µ—Ä—Ç—ã
    if curl -s http://localhost:9090/api/v1/alerts > /dev/null; then
        alerts=$(curl -s http://localhost:9090/api/v1/alerts | grep -o '"state":"[^"]*"' | sort | uniq -c)
        log "–°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–æ–≤ –≤ Prometheus:"
        echo "$alerts" | while read -r count state; do
            info "  $state: $count"
        done
    else
        error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –∏–∑ Prometheus"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Alertmanager
    if curl -s http://localhost:9093/api/v1/alerts > /dev/null; then
        am_alerts=$(curl -s http://localhost:9093/api/v1/alerts | grep -o '"status":"[^"]*"' | sort | uniq -c)
        log "–°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–æ–≤ –≤ Alertmanager:"
        echo "$am_alerts" | while read -r count status; do
            info "  $status: $count"
        done
    else
        error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –∏–∑ Alertmanager"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
show_menu() {
    echo ""
    echo "üî• –ù–ê–ì–†–£–ó–û–ß–ù–´–ï –¢–ï–°–¢–´ –î–õ–Ø –ê–õ–ï–†–¢–ò–ù–ì–ê"
    echo "=================================="
    echo "1. CPU —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç (60—Å)"
    echo "2. Memory —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç (60—Å)" 
    echo "3. Disk I/O —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç (60—Å)"
    echo "4. Network —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç (60—Å)"
    echo "5. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç (120—Å)"
    echo "6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã"
    echo "7. –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç"
    echo "0. –í—ã—Ö–æ–¥"
    echo ""
}

# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç
custom_test() {
    echo ""
    echo "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç:"
    read -p "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫): " duration
    read -p "–¢–∏–ø (cpu/memory/disk/network/combined): " test_type
    
    case $test_type in
        cpu)
            read -p "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: " cores
            cpu_stress_test "$duration" "$cores"
            ;;
        memory)
            read -p "–ü–∞–º—è—Ç—å (MB): " memory
            memory_stress_test "$duration" "$memory"
            ;;
        disk)
            read -p "Workers: " workers
            disk_stress_test "$duration" "$workers"
            ;;
        network)
            read -p "RPS: " rps
            network_stress_test "$duration" "$rps"
            ;;
        combined)
            combined_stress_test "$duration"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: $test_type"
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    check_dependencies
    
    if [ $# -eq 0 ]; then
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while true; do
            show_menu
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: " choice
            
            case $choice in
                1) cpu_stress_test 60 2 ;;
                2) memory_stress_test 60 512 ;;
                3) disk_stress_test 60 2 ;;
                4) network_stress_test 60 10 ;;
                5) combined_stress_test 120 ;;
                6) check_alerts ;;
                7) custom_test ;;
                0) log "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"; exit 0 ;;
                *) error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: $choice" ;;
            esac
            
            echo ""
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        done
    else
        # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        case $1 in
            cpu) cpu_stress_test "${2:-60}" "${3:-2}" ;;
            memory) memory_stress_test "${2:-60}" "${3:-512}" ;;
            disk) disk_stress_test "${2:-60}" "${3:-2}" ;;
            network) network_stress_test "${2:-60}" "${3:-10}" ;;
            combined) combined_stress_test "${2:-120}" ;;
            alerts) check_alerts ;;
            *) 
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [cpu|memory|disk|network|combined|alerts] [duration] [params]"
                echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
                exit 1
                ;;
        esac
    fi
}

main "$@"
