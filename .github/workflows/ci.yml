name: ci-cd

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.tf-output.outputs.public_ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Maybe skip infra
        id: gate
        env:
          APPLY_INFRA: ${{ secrets.APPLY_INFRA }}
        run: |
          if [ "${APPLY_INFRA}" != "true" ]; then
            echo "Terraform infra disabled (APPLY_INFRA != true)"
            echo "public_ip=" >> $GITHUB_OUTPUT
            exit 0
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - name: Terraform Init/Apply (YC)
        if: ${{ env.APPLY_INFRA == 'true' }}
        working-directory: infra/terraform
        env:
          APPLY_INFRA: ${{ secrets.APPLY_INFRA }}
          TF_VAR_yc_token: ${{ secrets.YC_TOKEN }}
          TF_VAR_yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_yc_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_yc_zone: ${{ secrets.YC_ZONE }}
          TF_VAR_ssh_user: ${{ secrets.SSH_USER }}
          TF_VAR_public_ssh_key: ${{ secrets.PUBLIC_SSH_KEY }}
          TF_VAR_ubuntu_image_id: ${{ secrets.UBUNTU_IMAGE_ID }}
          TF_VAR_vpc_network_id: ${{ secrets.VPC_NETWORK_ID }}
          TF_VAR_vpc_subnet_id: ${{ secrets.VPC_SUBNET_ID }}
          TF_VAR_security_group_id: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false
      - name: Capture Terraform outputs
        id: tf-output
        if: ${{ env.APPLY_INFRA == 'true' }}
        run: |
          cd infra/terraform
          if terraform output -raw public_ip >/dev/null 2>&1; then
            echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
          else
            echo "::warning::Terraform output 'public_ip' not found. Check apply logs."
          fi
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          file: Dockerfile

  deploy:
    needs: [build-and-push, infra]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Ansible and collections
        run: |
          python3 -m pip install --upgrade pip
          pip install ansible-core
          mkdir -p ~/.ansible/collections
          ansible-galaxy collection install community.docker ansible.posix --force
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Resolve VM IP
        id: ip
        shell: bash
        run: |
          VM_IP="${{ needs.infra.outputs.public_ip }}"
          if [ -z "$VM_IP" ]; then VM_IP="${{ secrets.VM_PUBLIC_IP }}"; fi
          if [ -z "$VM_IP" ]; then echo "::error::VM IP is empty. Set VM_PUBLIC_IP or enable infra job."; exit 1; fi
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
      - name: Add host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ steps.ip.outputs.vm_ip }}" -p 22 >> ~/.ssh/known_hosts
      - name: Update inventory with VM IP
        run: |
          sed -i "s/YOUR_VM_IP/${{ steps.ip.outputs.vm_ip }}/" infra/ansible/inventory.ini
      - name: Run Ansible playbook
        env:
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          ansible-playbook -i infra/ansible/inventory.ini infra/ansible/site.yml

